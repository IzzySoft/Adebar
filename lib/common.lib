##############################################################################
# Adebar Â© 2014-2020 by Itzchak Rehberg
# This is part of the Adebar project, see https://codeberg.org/izzy/Adebar
# Protected by the GPLv2
# ----------------------------------------------------------------------------
# common/generic helper functions
##############################################################################

#
# ---------------=[ remove leading and trailing whitespaces from a string ]=--
# usage:
#   trimmed="$(trim "$untrimmed")"
#   trimmed="$(trim "$untrimmed" 1)"
# $1: string to trim
# $2: if set, keep tabs, CR and LF (else remove them from *everywhere* in the string)
#
trim() {
    local var="$1"
    [[ -z "$2" ]] && var="${var//[$'\t\r\n']}"  # remove all tabs, CR and LF from anywhere within the string
    var="${var#"${var%%[![:space:]]*}"}"        # remove leading whitespace characters
    var="${var%"${var##*[![:space:]]}"}"        # remove trailing whitespace characters
    echo -n "$var"
}

#
# -------------------------------------------=[ Log progress (if enabled) ]=--
# Call: doProgress "what to show" [level [eparm]]"
# level defaults to 1; eparm has optional additional params to echo
# depends on global PROGRESS var (level, 0..n; 0=be quiet)
#
doProgress() {
  [[ $PROGRESS -eq 0 ]] && return
  if [[ -z "$2" ]]; then
    local level=1
  else
    local level=$2
  fi
  if [[ -n "$3" ]]; then
    local eparm="-e${3}"
  else
    local eparm="-e"
  fi
  if [[ $PROGRESS -ge $level ]]; then
    echo ${eparm} "$1"
  fi
}

#
# -----------------------------------------------------=[ Report "oopses" ]=--
# params: in_function, in_line, msg [, log_level]
# example call: oops "pkg" "${LINENO}" "Unexpected: '$zeile'" 3
# level will be "adjusted" according to _OOPS_LEVEL_ADJUST (for debug purposes or to "hide" oopses)
# if not specified, level defaults to 2 (as "oopses" are usually informal only)
#
oops() {
  local level=$4
  [[ -z "$level" ]] && level=2
  [ -n "${OOPSES[$2]}" -a ${_OOPS_REPEAT} -eq 0 ] && return
  OOPSES[$2]=1
  local txt="Oops in $1 at line $2: $3"
  if [[ $level -lt 2 ]]; then
    txt=$(ansi_code "${txt}" "red")
  else
    txt=$(ansi_code "${txt}" "yellow")
  fi
  level=$(($_OOPS_LEVEL_ADJUST + $level))
  doProgress "${txt}" $level
}

#
# -------------------=[ Check whether $needle is contained in $haystack[] ]=--
# Call it like: in_array $tmpstring "${P_SKIP[@]}"
#
in_array() {
    local hay needle=$1
    shift
    for hay; do
        [[ $hay == $needle ]] && return 0
    done
    return 1
}


#
# -----------------------------------------=[ Wrap a string in ANSI codes ]=--
# depends on global variable USE_ANSI (0|1). If set to 0, string is returned unchanged.
#
ansi_code() {
  if [[ USE_ANSI -eq 0 ]]; then
    echo "$1"
    return
  fi
  local txt="$1"
  shift
  while [[ -n "$1" ]]; do
    case "$1" in
      "bold")   txt="\033[1;37m${txt}" ;; # BOLD: \033[1;37m // NORMAL: \033[0;37m // # RED: \033[1;31m
      "red")    txt="\033[1;31m${txt}" ;; # more: http://tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html
      "yellow") txt="\033[1;33m${txt}" ;;
      "green")  txt="\033[1;32m${txt}" ;;
    esac
    shift
  done
  echo "${txt}\033[0m"
}


#
# ---------------------------------=[ Format file sizes to human-readible ]=--
# usage:
#   formatted=$(format_fsize $bytes)
# $1: file size in bytes (number)
#
format_fsize() {
  if [[ -z "$1" ]]; then
    echo "(unknown)"
  else
    size=$1
    if [[ $size -gt $((1024*1024*1024)) ]]; then
      size=$((size/1024/1024/1024)); unit="GiB"
    elif [[ $size -gt $((1024*1024)) ]]; then
      size=$((size/1024/1024)); unit="MiB"
    elif [[ $size -gt 1024 ]]; then
      size=$((size/1024)); unit="KiB"
    else
      unit="B"
    fi
    echo "${size} ${unit}"
  fi
}

#
# ====================================================[ HTML/Doc wrappers ]===
# ------------------------------------------------------------=[ Headings ]=--
# Create an HTML heading. Params: level (1-6), title [, id]
function heading() {
  if [[ -n "$3" ]]; then
    echo "<h${1} id='${3}'>${2}</h${1}>"
  else
    echo "<h${1}>${2}</h${1}>"
  fi
}

# --------------------------------------------------------------=[ Tables ]=--
# Opening tag for a table. Param: css_class_name
function tab_classopen() {
  if [[ -n "$2" ]]; then
    echo "<table class='${1}' id='${2}'>"
  else
    echo "<table class='${1}'>"
  fi
}

# Closing tag for a table
function tab_close() {
  echo "</table>"
}

# One table row with a single multi-span th. Param: row content [, css_class]
function trth2() {
  if [[ -n "$2" ]]; then
    echo " <tr><th colspan='2' class='$2'>${1}</th></tr>"
  else
    echo " <tr><th colspan='2' class='title'>${1}</th></tr>"
  fi
}

# One table row with a th followed by a td. Params: th-content, td-content
function trthtd() {
  echo " <tr><th>${1}:</th><td>${2}</td></tr>"
}
# like trthtd but td left open (for nesting)
function trthtd_() {
  echo " <tr><th>${1}:</th><td>${2}"
}
# close td and open new td
function tdtd() {
  echo "</td><td>"
}
# close table row left open by trthtd_
function _tdtr() {
  echo "</td></tr>"
}

# ----------------------------------------------------------=[ Hyperlinks ]=--
# Hyperlink. Parameters: url [, name [, title]]
function href() {
  if [[ -n "$3" ]]; then
    echo "<a href='${1}' title='${3}'>${2}</a>"
  elif [[ -n "$2" ]]; then
    echo "<a href='${1}'>${2}</a>"
  else
    echo "<a href='${1}'>${1}</a>"
  fi
}
