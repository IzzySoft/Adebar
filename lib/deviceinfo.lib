##############################################################################
# Adebar © 2014 - 2020 by Itzchak Rehberg
# This is part of the Adebar project, see https://codeberg.org/izzy/Adebar
# Protected by the GPLv2
# ----------------------------------------------------------------------------
# library to get device info
##############################################################################

# RadioStat helper (MultiSIM)
print_radiostat() {
    declare -A mradio
    case $1 in
      0) for key in "${!radio[@]}"; do mradio["$key"]=${radio["$key"]}; done ;;
      1) for key in "${!radio1[@]}"; do mradio["$key"]=${radio1["$key"]}; done ;;
    esac
    echo "$(trthtd 'Signal strength' "$(href 'https://android.stackexchange.com/a/74954/16575' "${mradio[mSignalStrength]}" 'Interpreting the output of dumpsys telephony.registry')")" >> "$devicedoc"
    local serv
    if [[ "${mradio[mServiceState]:0:1}" = "{" ]]; then         # Android 8+
      mradio["mServiceState"]=${mradio["mServiceState"]:1:-1}   # get rid of the curly braces
      IFS=',' read -ra serv <<< "${mradio["mServiceState"]}"    # comma-separated string to array
      echo "$(trthtd_ 'Service state' '<details><summary>expand</summary><ul>')" >> "$devicedoc"
      for i in "${serv[@]}"; do
        i="${i#"${i%%[![:space:]]*}"}"    # ltrim
        echo "    <li>${i}</li>" >> "$devicedoc"
      done
      echo "  </ul>$(_tdtr)" >> "$devicedoc"
    else
      echo "$(trthtd 'Service state' "${mradio[mServiceState]:0:1} (${servicestate[${radio[mServiceState]:0:1}]})")" >> "$devicedoc"
    fi
    echo "$(trthtd 'Call state' "${mradio[mCallState]} (${callstate[${mradio[mCallState]}]})")" >> "$devicedoc"
    echo "$(trthtd 'Call forwarding active' "${mradio[mCallForwarding]}")" >> "$devicedoc"
    [[ -n "${mradio[mMessageWaiting]}" ]] && echo "$(trthtd 'Message waiting' "${mradio[mMessageWaiting]}")" >> "$devicedoc"
    if [[ "${mradio[mDataConnectionPossible]}" = "false" ]]; then
      echo "$(trthtd 'Data connection possible' "${mradio[mDataConnectionPossible]} (${mradio[mDataConnectionReason]})")" >> "$devicedoc"
    else
      [[ -n "${mradio[mDataConnectionPossible]}" ]] && echo "$(trthtd 'Data connection possible' "${mradio[mDataConnectionPossible]}")" >> "$devicedoc"
      left="${mradio[mDataActivity]}"
      echo "$(trthtd 'Data activity' "${mradio[mDataActivity]} (${dataactivity[${mradio[mDataActivity]}]})")" >> "$devicedoc"
      if [[ -n "${mradio[mDataConnectionState]}" && "${mradio[mDataConnectionState]}" != "-1" ]]; then
        echo "$(trthtd 'Data connection state' "${mradio[mDataConnectionState]} (${dataconnectionstate[${mradio[mDataConnectionState]}]})")" >> "$devicedoc"
        [[ "${mradio[mDataActivity]}" -lt 4 ]] && { # not dormant
          echo "$(trthtd 'Data connection link properties' "${mradio[mDataConnectionLinkProperties]#=*}")" >> "$devicedoc"
          echo "$(trthtd 'Data connection network capabilities' "${mradio[mDataConnectionNetworkCapabilities]#=*}")" >> "$devicedoc"
        }
      elif [[ -n "${mradio[mActiveDataConnectionState]}" ]]; then
        echo "$(trthtd 'Data connection state' "${mradio[mActiveDataConnectionState]} (${dataconnectionstate[${mradio[mActiveDataConnectionState]}]})")" >> "$devicedoc"
      else
        echo "$(trthtd 'Data connection state' 'unknown')" >> "$devicedoc"
      fi
      [[ -n "${mradio[mDataConnectionApn]}" ]] && echo "$(trthtd 'Current APN' "${mradio[mDataConnectionApn]}")" >> "$devicedoc"
    fi
}

#
# Get device info
#
getDeviceInfo() {
  [[ $MK_DEVICEINFO -ne 1 ]] && return
  doProgress "Collecting device information"
  local devicedoc="${DOCDIR}/deviceInfo.md"
  local devicehead="${DOCDIR}/deviceInfo.head"
  local left
  local right
  local tmp=$(mktemp)
  local tmp2=$(mktemp)
  trap "rm -f -- '$tmp' '$tmp2'" RETURN

  echo "$(heading 1 "${DEVICE_NAME} Device Information" 'devinfo')" > "$devicedoc"
  echo " <li>$(href '#devinfo' 'DeviceInfo')<ul>" > "$devicehead"
  echo "<p class='date_info'>(Generated at: $(date '+%Y-%m-%d %H:%M')) <sup><b>$(href "${WIKI_BASE}/DeviceInfo-explained" 'ⓘ' 'Wiki')</b></sup></p>" >> "$devicedoc"
  copyAdbContent getprop "adb ${ADBOPTS} shell getprop" $tmp

  doProgress "- Evaluating device properties" 2
  declare -A DEVPROP
  declare -A HAVPROPS # groups, e.g. "wifi" for "wifi.*"

  # Parse getprop into DEVPROP & HAVPROPS
  local prop
  local propname
  while read zeile; do
    [[ -z "${zeile}" ]] && continue
    zeile="${zeile//[\[\]:]/ }"
    prop=($zeile)
    [[ -z "${prop[1]}" ]] && continue
    propname="${prop[0]}"
    HAVPROPS[${prop[0]%%\.*}]="y"
    unset prop[0]
    DEVPROP[${propname}]="${prop[*]}"
  done < "${tmp}"

  #=============================================[ Device & ROM properties ]====
  # Do something with the collected information (and collect more while on it)
  echo "$(heading 2 'Device and ROM properties' 'devprops')" >> "$devicedoc"
  echo "  <li>$(href '#devprops' 'Properties')</li>" >> "$devicehead"
  #-------------------------------------------------------=[ Product Info ]=---
  doProgress "   + checking for product details" 3
  echo "$(tab_classopen 'block' 'tab_prodinfo')" >> "$devicedoc"
  echo "$(trth2 'Product Info')" >> "$devicedoc"
  echo "$(trthtd 'Manufacturer' "${DEVPROP[ro.product.manufacturer]}")" >> "$devicedoc"                   # ro.product.manufacturer=Motorola
  echo "$(trthtd 'Model' "${DEVPROP[ro.product.model]} (${DEVPROP[ro.product.device]})")" >> "$devicedoc" # ro.product.model=A953 (ro.product.device=milestone2)
  local serial="${DEVPROP[ro.serialno]}"                                                                  # 015ECFC703028007
  [[ -z "$serial" ]] && {
    if [[ -n "${DEVPROP[ro.boot.serialno]}" ]]; then
      serial="${DEVPROP[ro.boot.serialno]}"
    elif [[ -n "$SERIAL" ]]; then
      serial="${SERIAL}"
    elif [[ -n "${DUMMYDIR}" ]]; then
      serial="0123456789ABCDEF"
    else
      [[ $(adb devices |grep "device$" |wc -l) -eq 1 ]] && serial="$(adb devices |grep "device$"|awk '{print $1}')"
    fi
  }
  echo "$(trthtd 'Serial' "${serial}")" >> "$devicedoc"                                    # 015d3c26a420000a
  serial="${DEVPROP[gsm.baseband.imei]}"
  [[ -z "$serial" ]] && {
    copyAdbContent dumpsys_iphonesubinfo "adb ${ADBOPTS} shell dumpsys iphonesubinfo" "${tmp}"
    serial="$(grep -i "device id" "${tmp}" | awk '{print $NF}' | sed 's/\r//g')"
  }
  [[ -z "$serial" ]] && { # https://stackoverflow.com/a/27003016/2533433 (iphonesubinfo 1-3 seem identical, but 3 is explicitly getImeiForSubscriber)
    serial="$(getAdbContent serviceCall_iphonesubinfo_3 "adb $ADBOPTS shell service call iphonesubinfo 3")"
    [[ ${#serial} -gt 30 ]] && {    # DummyDevices already do the cleanup on creation
      echo "$serial" | awk -F "'" '{print $2}' | sed '1 d' | tr -d '.' | awk '{print}' ORS= > $tmp2
      serial="$(cat $tmp2)"
      serial="$(trim $(cat $tmp2))"
    }
  }
  [[ -n "$serial" ]] && echo "$(trthtd 'IMEI' "$serial")" >> "$devicedoc"
  [[ -n "${DEVPROP[ro.board.platform]}" ]] && echo "$(trthtd 'Platform' "${DEVPROP[ro.board.platform]}")" >> "$devicedoc" # omap3
  [[ -n "${DEVPROP[ro.radio.hw.version]}" ]] && echo "$(trthtd 'Radio version' "${DEVPROP[ro.radio.hw.version]}")" >> "$devicedoc" # SJUG5980AA
  [[ -n "${DEVPROP[gsm.baseband.version]}" ]] && echo "$(trthtd 'Baseband' "${DEVPROP[gsm.baseband.version]}")" >> "$devicedoc" # L6260_MODEM_SIC_02.1233.00
  if [[ -n "${DEVPROP[ro.boot.bootloader]}" ]]; then echo "$(trthtd 'Bootloader' "${DEVPROP[ro.boot.bootloader]}")" >> "$devicedoc"
  elif [[ -n "${DEVPROP[ro.bootloader]}" ]]; then echo "$(trthtd 'Bootloader' "${DEVPROP[ro.bootloader]}")" >> "$devicedoc"
  fi
  [[ -n "${DEVPROP[wlan.chip.vendor]}${DEVPROP[wlan.chip.version]}" ]] && echo "$(trthtd 'WiFi vendor / version' "${DEVPROP[wlan.chip.vendor]} / ${DEVPROP[wlan.chip.version]}")" >> "$devicedoc" # brcm / bcm4330x
  echo "$(trthtd 'CPU' "${DEVPROP[ro.product.cpu.abi]}")" >> "$devicedoc"                  # ro.product.cpu.abi=armeabi-v7a
  [[ -n "${DEVPROP[ro.product.cpu.abilist]}" ]] && echo "$(trthtd 'CPU compatibility' "${DEVPROP[ro.product.cpu.abilist]}")" >> "$devicedoc"
  echo "$(trthtd 'Screen density' "${DEVPROP[ro.sf.lcd_density]}")" >> "$devicedoc"        # ro.sf.lcd_density=240
  echo "$(tab_close)" >> "$devicedoc"
  echo >> "$devicedoc"

  #------------------------------------------------------------=[ Sensors ]=---
  if [[ ${MK_DEVICEINFO_SENSORS} -gt 0 ]]; then
    doProgress "   + checking for sensor details" 3
    copyAdbContent dumpsys_sensorservice "adb ${ADBOPTS} shell dumpsys sensorservice 2>/dev/null" "${tmp}"
    if [[ $(cat "${tmp}" | wc -l) -gt 1 ]]; then # make sure sensorservice is available
      echo "$(tab_classopen 'block' 'tab_sensors')" >> "$devicedoc"
      echo "$(trth2 'Sensors')" >> "$devicedoc"
      local -i lineno=0
      if [[ $DEVICE_SDKVER -lt 25 ]]; then  # Android 7 and below
        re="^([^|]+)\s*\|\s*([^|]+)\s*\|"
        while read zeile; do
          [[ "${zeile:0:2}" = "  " ]] && continue
          [[ $zeile =~ (^[0-9]+ h/w sensors:) ]] && break
          if [[ $zeile =~ $re ]]; then
            lineno+=1
            if [[ -z "$(trim "${BASH_REMATCH[2]}")" ]]; then
              echo "$(trthtd $lineno "$(trim "${BASH_REMATCH[1]}")")" >> "$devicedoc"
            else
              echo "$(trthtd $lineno "$(trim "${BASH_REMATCH[1]}") ($(trim "${BASH_REMATCH[2]}"))")" >> "$devicedoc"
            fi
          fi
        done < "${tmp}"
      else # SDK 25+/Android 7.1+ (output format of "dumpsys sensorservice" changed)
        cat "${tmp}" |grep -E -A99999 "^Sensor List:" |grep -E -B99999 "^Fusion States:" > $tmp2
        re="0[x0-9a-f][0-9a-f]+\)\s+([^|]+)\|\s*([^|]+)"
        while read zeile; do
          [[ $zeile =~ $re ]] && {
            lineno+=1
            echo "$(trthtd $lineno "$(trim "${BASH_REMATCH[1]}") ($(trim "${BASH_REMATCH[2]}"))")" >> "$devicedoc"
          }
        done < "${tmp2}"
      fi
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"
    fi
  fi

  #---------------------------------------------------------=[ OS Details ]=---
  doProgress "   + checking for OS details" 3
  echo "$(tab_classopen 'block' 'tab_osdetails')" >> "$devicedoc"
  echo "$(trth2 'OS details')" >> "$devicedoc"
  echo "$(trthtd 'SDK/Android version' "${DEVPROP[ro.build.version.sdk]}/${DEVPROP[ro.build.version.release]}")" >> "$devicedoc" # 16/4.1.2
  [[ -n "${DEVPROP[ro.modversion]}" ]] && echo "$(trthtd 'Mod' "${DEVPROP[ro.modversion]}")" >> "$devicedoc" # ro.modversion=10-20121228-NIGHTLY-milestone2
  [[ -n "${DEVPROP[ro.build.id]}" ]] && echo "$(trthtd 'BuildID' "${DEVPROP[ro.build.id]}")" >> "$devicedoc" # JZO54K
  [[ -n "${DEVPROP[ro.build.date]}" ]] && echo "$(trthtd 'Build date' "${DEVPROP[ro.build.date]}")" >> "$devicedoc"
  echo "$(trthtd 'Fingerprint' "${DEVPROP[ro.build.fingerprint]}")" >> "$devicedoc" # MOTO/A953_O2DE/milestone2:2.3.6/4.5.1-134_DFP-132/1317968148:user/release-keys
  [[ -n "${DEVPROP[ro.build.version.security_patch]}" ]] && echo "$(trthtd 'Security Patch Level' "${DEVPROP[ro.build.version.security_patch]}")" >> "$devicedoc" # 2019-12-05
  [[ "$(getAdbContent whence_uname "adb ${ADBOPTS} shell whence uname")" ]] && echo "$(trthtd 'Kernel' "$(getAdbContent uname-r "adb ${ADBOPTS} shell uname -r")")" >> "$devicedoc" || echo "$(trthtd 'Kernel' "$(getAdbContent uname-r "adb ${ADBOPTS} shell busybox uname -r")")" >> "$devicedoc"
  if [[ -n "${DEVPROP[ro.product.locale.language]}" ]]; then left="${DEVPROP[ro.product.locale.language]}"; else left="${DEVPROP[ro.product.locale]}"; fi
  if [[ -n "${DEVPROP[ro.product.locale.region]}" ]]; then righ="${DEVPROP[ro.product.locale.region]}"; else right="${DEVPROP[ro.csc.country_code]}"; fi
  echo "$(trthtd 'Factory language' "${left}_${right}")" >> "$devicedoc" # en_US
  if [[ -n "${DEVPROP[persist.sys.language]}" ]]; then left="${DEVPROP[persist.sys.language]}"; else left="${DEVPROP[persist.sys.locale]}"; fi
  echo "$(trthtd 'Configured language' "${left}_${DEVPROP[persist.sys.country]}")" >> "$devicedoc" # de_DE
  echo "$(trthtd 'Configured timezone' "${DEVPROP[persist.sys.timezone]}")" >> "$devicedoc" # Europe/Berlin
  echo "$(tab_close)" >> "$devicedoc"
  echo >> "$devicedoc"

  #====================================================[ pm list features ]====
  if [[ ${MK_DEVICEINFO_PMLISTFEATURES} -gt 0 ]]; then
    doProgress "- Evaluating 'pm list features'" 2
    echo  >> "$devicedoc"
    echo "$(heading 2 'Device features' 'devfeat')" >> "$devicedoc"
    echo "  <li>$(href '#devfeat' 'Features')</li>" >> "$devicehead"
    echo "<p><code>pm list features</code>: <sup><b>$(href "${WIKI_BASE}/DeviceInfo-explained#user-content-device-features" 'ⓘ' 'Wiki')</b></sup></p>" >> "$devicedoc"
    echo "<details><summary>expand</summary>$(tab_classopen 'block' 'tab_pmfeatures')" >> "$devicedoc"
    lineno=0
    for feature in $(getAdbContent pm_list_features "adb ${ADBOPTS} shell pm list features"); do
      feature=${feature//[$'\r\n']}
      lineno+=1
      echo "$(trthtd $lineno "${feature#*:}")" >> "$devicedoc"
    done
    echo "$(tab_close)</details>" >> "$devicedoc"
    echo >> "$devicedoc"
  fi

  #=======================================================[ Device status ]====
  if [[ ${MK_DEVICEINFO_STATUS} -gt 0 ]]; then
    doProgress "- Evaluating device status" 2
    echo >> "$devicedoc"
    echo "$(heading 2 "Device Status <sup><b>$(href "${WIKI_BASE}/DeviceInfo-explained#user-content-device-status" 'ⓘ' 'Wiki')</b></sup>" 'devstatus')" >> "$devicedoc"
    echo "  <li>$(href '#devstatus' 'Status')</li>" >> "$devicehead"

    #---------------------------------------------------=[ Battery Status ]=---
    # @TODO: This needs to be reworked for Android 9+ (see "skip header") as new sections have been added
    doProgress "  + Battery status" 3
    echo "$(tab_classopen 'block' 'tab_batterystatus')" >> "$devicedoc"
    echo "$(trth2 'Battery Status')" >> "$devicedoc"
    copyAdbContent dumpsys_battery "adb ${ADBOPTS} shell dumpsys battery" $tmp
    local battstat=(none unknown charging discharging "not charging" full)
    local batthealth=(none unknown good overheat dead overvoltage "unspecified failure" cold)
    while IFS='' read zeile; do
      [[ "${zeile:0:1}" != " " ]] && continue # skip header
      zeile="${zeile//[$'\t\r\n']}"
      right="$(trim "${zeile#*:}")"
      left="$(trim "${zeile%:*}")"
      case "$left" in
        "status") echo "$(trthtd "${left}" "${right} (${battstat[${right}]})")"  >> "$devicedoc" ;;
        "health") echo "$(trthtd "${left}" "${right} (${batthealth[${right}]})")"  >> "$devicedoc" ;;
        *)        echo "$(trthtd "${left}" "${right}")"  >> "$devicedoc" ;;
      esac
    done < "${tmp}"
    echo "$(tab_close)" >> "$devicedoc"
    echo >> "$devicedoc"

    #--------------------------------------------=[ Radio, SIM & Provider ]=---
    if [[ ${MK_RADIO} -gt 0 ]]; then
      doProgress "  + Radio status" 3
      echo >> "$devicedoc"
      echo "$(tab_classopen 'block' 'tab_radiostatus')" >> "$devicedoc"
      echo "$(trth2 'Radio Status')" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.version.baseband]}" ]]  && echo "$(trthtd 'Baseband' "${DEVPROP[gsm.version.baseband]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.version.baseband1]}" ]] && echo "$(trthtd 'Baseband (SIM2)' "${DEVPROP[gsm.version.baseband1]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.version.ril-impl]}" ]]  && {
        if [[ -n "${DEVPROP[rild.libpath]}" ]]; then echo "$(trthtd 'RIL' "${DEVPROP[gsm.version.ril-impl]} (<code>${DEVPROP[rild.libpath]}</code>)")" >> "$devicedoc"
        else echo "$(trthtd 'RIL' "${DEVPROP[gsm.version.ril-impl]}")" >> "$devicedoc"
        fi
      }
      declare -A radio
      declare -A radio1
      copyAdbContent dumpsys_telephony.registry "adb ${ADBOPTS} shell dumpsys telephony.registry" $tmp2
      grep "=" $tmp2 > $tmp
      local callstate=(idle ringing off-hook)
      local servicestate=(service "out of service" "emergency only" "powered off")
      local dataactivity=(none in out inout dormant)
      local dataconnectionstate=(disconnected connecting connected suspended disconnecting)
      local phoneid=0
      local vname
      while IFS='' read zeile; do
        zeile="${zeile//[$'\t\r\n']}"
        zeile="${zeile#"${zeile%%[![:space:]]*}"}" #"
        vname="${zeile%%=*}"
        if [[ "$vname" = "Phone Id" ]]; then # MultiSIM
          phoneid="${zeile#*=}"
          continue
        fi
        [[ "${vname:0:1}" == "{" ]] && break # only registration history follows here
        case $phoneid in
          0) radio[${zeile%%=*}]="${zeile#*=}" ;;
          1) radio1[${zeile%%=*}]="${zeile#*=}" ;;
          *) oops "dev" "${LINENO}" "Unexpected phone id: '${zeile#*=}'" 2 ;;
        esac
      done < "${tmp}"
      [[ $phoneid -gt 0 ]] && echo "$(trth2 'SIM1')" >> "$devicedoc"
      print_radiostat 0
      [[ $phoneid -gt 0 ]] && {
        echo "$(trth2 'SIM2')" >> "$devicedoc"
        print_radiostat 1
      }
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"
    fi

    if [[ -n "${DEVPROP[gsm.operator.alpha]}" ]]; then # Provider info
      doProgress "  + Provider info" 3
      echo "$(tab_classopen 'block' 'tab_providerinfo1')" >> "$devicedoc"
      if [[ -n "${DEVPROP[gsm.operator.alpha.2]}" ]]; then # Dual-SIM device
        echo "$(trth2 'Provider info (SIM1)')" >> "$devicedoc"
      else
        echo "$(trth2 'Provider info')" >> "$devicedoc"
      fi
      echo "$(trthtd 'Mobile provider' "${DEVPROP[gsm.operator.alpha]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.operator.iso-country]}" ]] && echo "$(trthtd 'Provider country' "${DEVPROP[gsm.operator.iso-country]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.operator.numeric]}" ]] && echo "$(trthtd 'Provider code' "${DEVPROP[gsm.operator.numeric]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.sim.state]}" ]] && echo "$(trthtd 'SIM state' "${DEVPROP[gsm.sim.state]}")" >> "$devicedoc"
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"
    fi

    if [[ -n "${DEVPROP[gsm.operator.alpha.2]}" ]]; then # Provider info 2nd SIM (Dual-SIM devices)
      doProgress "  + Provider info (SIM2)" 3
      echo >> "$devicedoc"
      echo "$(tab_classopen 'block' 'tab_providerinfo2')" >> "$devicedoc"
      echo "$(trth2 'Provider info (SIM2)')" >> "$devicedoc"
      echo "$(trthtd 'Mobile provider' "${DEVPROP[gsm.operator.alpha.2]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.operator.iso-country.2]}" ]] && echo "$(trthtd 'Provider country' "${DEVPROP[gsm.operator.iso-country.2]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.operator.numeric.2]}" ]] && echo "$(trthtd 'Provider code' "${DEVPROP[gsm.operator.numeric.2]}")" >> "$devicedoc"
      [[ -n "${DEVPROP[gsm.sim.state.2]}" ]] && echo "$(trthtd 'SIM state' "${DEVPROP[gsm.sim.state.2]}")" >> "$devicedoc"
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"
    fi
  fi

  #-------------------------------------------------=[ Networking details ]=---
  doProgress "  + networking details" 3
  echo "$(tab_classopen 'block' 'tab_networkdetails')" >> "$devicedoc"
  echo "$(trth2 'Networking details')" >> "$devicedoc"
  if [[ -n "${DEVPROP[net.hostname]}" ]]; then
    echo "$(trthtd 'Hostname' "${DEVPROP[net.hostname]}")" >> "$devicedoc"
  elif [[ -n "${DEVPROP[ro.build.product]}" ]]; then  # this is where newer Androids take it from (could also be ro.build.device)
    echo "$(trthtd 'Hostname' "${DEVPROP[ro.build.product]}")" >> "$devicedoc"
  elif [[ -n "${DEVPROP[ro.build.device]}" ]]; then
    echo "$(trthtd 'Hostname' "${DEVPROP[ro.build.device]}")" >> "$devicedoc"
  elif [[ -n "${DEVPROP[ro.vendor.product.device]}" ]]; then
    echo "$(trthtd 'Hostname' "${DEVPROP[ro.vendor.product.device]}")" >> "$devicedoc"
  elif [[ -n "${DEVPROP[ro.product.device]}" ]]; then
    echo "$(trthtd 'Hostname' "${DEVPROP[ro.product.device]}")" >> "$devicedoc"
  fi
  [[ -n "${DEVPROP[wifi.interface]}" ]] && echo "$(trthtd 'WiFi Interface' "${DEVPROP[wifi.interface]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[wlan.driver.config]}" ]] && echo "$(trthtd 'WiFi config' "<code>${DEVPROP[wlan.driver.config]}</code>")" >> "$devicedoc"
  [[ -n "${DEVPROP[net.dns1]}${DEVPROP[net.dns2]}" ]] && echo "$(trthtd 'Default DNS server' "${DEVPROP[net.dns1]} / ${DEVPROP[net.dns2]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[wlan.driver.status]}" ]] && echo "$(trthtd 'WiFi driver status' "${DEVPROP[wlan.driver.status]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[wifi.supplicant_scan_interval]}" ]] && echo "$(trthtd 'WiFi scan interval' "${DEVPROP[wifi.supplicant_scan_interval]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[dhcp.wlan0.dns1]}" ]] && echo "$(trthtd 'WiFi DHCP DNS' "${DEVPROP[dhcp.wlan0.dns1]} / ${DEVPROP[dhcp.wlan0.dns2]} / ${DEVPROP[dhcp.wlan0.dns3]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[dhcp.wlan0.gateway]}" ]] && echo "$(trthtd 'WiFi default gateway' "${DEVPROP[dhcp.wlan0.gateway]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[dhcp.wlan0.ipaddress]}" ]] && echo "$(trthtd 'WiFi IP' "${DEVPROP[dhcp.wlan0.ipaddress]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[mobiledata.interfaces]}" ]] && echo "$(trthtd 'Mobile data interfaces' "${DEVPROP[mobiledata.interfaces]}")" >> "$devicedoc"
  echo "$(tab_close)" >> "$devicedoc"
  echo >> "$devicedoc"

  #------------------------------------------------------------=[ Storage ]=---
  doProgress "  + storage details" 3
  echo "$(tab_classopen 'block' 'tab_storagedetails')" >> "$devicedoc"
  echo "$(trth2 "Storage details <sup><b>$(href "${WIKI_BASE}/DeviceInfo-explained#user-content-storage-details" 'ⓘ' 'Wiki')</b></sup>")" >> "$devicedoc"
  [[ -n "${DEVPROP[EXTERNAL_STORAGE_MOUNT]}" ]] && echo "$(trthtd 'Internal SD mount point' "${DEVPROP[EXTERNAL_STORAGE_MOUNT]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[EXTERNAL_ADD_STORAGE_MOUNT]}" ]] && echo "$(trthtd 'External SD mount point' "${DEVPROP[EXTERNAL_ADD_STORAGE_MOUNT]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[ro.crypto.fuse_sdcard]}" ]] && echo "$(trthtd 'Internal SD via FUSE' "${DEVPROP[ro.crypto.fuse_sdcard]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[persist.sys.sdcardfs]}" ]] && echo "$(trthtd 'SDCardFS' "${DEVPROP[persist.sys.sdcardfs]}")" >> "$devicedoc"
  [[ -n "${DEVPROP[ro.crypto.state]}" ]] && echo "$(trthtd "$(href 'https://source.android.com/security/encryption' 'Storage encrypted')" "${DEVPROP[ro.crypto.state]}")" >> "$devicedoc"
  [[ ${MK_PARTINFO} -gt 0 ]] && writePartInfo "$devicedoc"
  echo "$(trthtd_ 'Disk statistics' "$(tab_classopen 'inner')")" >> "$devicedoc"
  copyAdbContent dumpsys_diskstats "adb ${ADBOPTS} shell dumpsys diskstats" ${tmp}
  re="(App|App Cache|App Data|Photos|Videos|Audio|Downloads|System|Other)( Size):\s*([0-9]+)"
  re2="(.+):\s*(.+)"
  while read zeile; do
    [[ "$zeile" =~ ^(Package Names:|App Sizes:|Cache Sizes:|App Data Sizes:) ]] && continue # 1-3 added w/ Android 7.1, 4 w/ Oreo
    if [[ "${zeile}" =~ $re ]]; then
      echo "  $(trthtd "${BASH_REMATCH[1]}${BASH_REMATCH[2]}" "$((${BASH_REMATCH[3]} /1024/1024)) MiB")" >> "$devicedoc"
    elif [[ "${zeile}" =~ $re2 ]]; then
      echo "  $(trthtd "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}")" >> "$devicedoc"
    else
      echo -e "  $(trthtd "${zeile/// }" '')" >> "$devicedoc"
    fi
  done < ${tmp}
  echo " $(tab_close)$(_tdtr)" >> "$devicedoc"
  echo "$(tab_close)" >> "$devicedoc"
  echo >> "$devicedoc"

  #---------------------------------------------=[ SafetyNet (Android 5+) ]=---
  [[ -n "${DEVPROP[ro.boot.flash.locked]}" || -n "${DEVPROP[ro.boot.verifiedbootstate]}" || -n "${DEVPROP[ro.boot.veritymode]}" ]] && {
    doProgress "  + SafetyNet details" 3
    echo "$(tab_classopen 'block' 'tab_safetynetdetails')" >> "$devicedoc"
    echo "$(trth2 "SafetyNet <b><sup>$(href "${WIKI_BASE}/DeviceInfo-explained#user-content-safetynet" 'ⓘ' 'Wiki')</sup></b>")" >> "$devicedoc"
    [[ -n "${DEVPROP[ro.boot.flash.locked]}" ]] && {
      if [[ ${DEVPROP[ro.boot.flash.locked]} -eq 1 ]]; then echo "$(trthtd 'BootLoader' 'locked')" >> "$devicedoc"
      elif [[ ${DEVPROP[ro.boot.flash.locked]} -eq 0 ]]; then echo "$(trthtd 'BootLoader' 'unlocked (SafetyNet FAIL)')" >> "$devicedoc"
      fi
    }
    [[ -n "${DEVPROP[ro.boot.verifiedbootstate]}" ]] && {
      case "${DEVPROP[ro.boot.verifiedbootstate]}" in
        green)  echo "$(trthtd "$(href 'https://source.android.com/security/verifiedboot' 'Verified Boot State')" 'green (device is LOCKED and user-settable root of trust is not used)')" >> "$devicedoc" ;;
        yellow) echo "$(trthtd "$(href 'https://source.android.com/security/verifiedboot' 'Verified Boot State')" 'yellow (device is LOCKED and user-settable root of trust is used)')" >> "$devicedoc" ;;
        orange) echo "$(trthtd "$(href 'https://source.android.com/security/verifiedboot' 'Verified Boot State')" 'orange (device is unlocked)')" >> "$devicedoc" ;;
        *)      echo "$(trthtd "$(href 'https://source.android.com/security/verifiedboot' 'Verified Boot State')" "${DEVPROP[ro.boot.verifiedbootstate]}")" >> "$devicedoc" ;;
      esac
    }
    [[ -n "${DEVPROP[ro.boot.veritymode]}" ]] && echo "$(trthtd "$(href 'https://source.android.com/security/verifiedboot/dm-verity' 'DM-Verity mode')" "${DEVPROP[ro.boot.veritymode]}")" >> "$devicedoc"
    [[ -n "${DEVPROP[sys.oem_unlock_allowed]}" ]] && {
      case "${DEVPROP[sys.oem_unlock_allowed]}" in
        0) echo "$(trthtd 'unlocking bootloader through developer settings' 'disabled')" >> "$devicedoc" ;;
        1) echo "$(trthtd 'unlocking bootloader through developer settings' 'enabled (SafetyNet might FAIL)')" >> "$devicedoc" ;;
        *) echo "$(trthtd 'oem_unlock_allowed' "${DEVPROP[sys.oem_unlock_allowed]}")" >> "$devicedoc" ;;
      esac
    }
    echo "$(tab_close)" >> "$devicedoc"
    echo >> "$devicedoc"
  }


  #---------------------------------------------------------------=[ Misc ]=---
  doProgress "  + misc details" 3
  echo "$(tab_classopen 'block' 'tab_miscdetails')" >> "$devicedoc"
  echo "$(trth2 'Miscellaneous')" >> "$devicedoc"
  [[ -n "${DEVPROP[keyguard.no_require_sim]}" ]] && {
    if [[ "${DEVPROP[keyguard.no_require_sim]}" = "true" ]]; then echo "$(trthtd 'SIM required for operation' 'No')" >> "$devicedoc"
    else echo "$(trthtd 'SIM required for operation' 'Yes')" >> "$devicedoc"
    fi
  }
  [[ -n "${DEVPROP[persist.sys.usb.config]}" ]] && echo "$(trthtd 'persistent USB modules' "${DEVPROP[persist.sys.usb.config]}")" >> "$devicedoc"
  if [[ -z "${DEVPROP[ro.adb.secure]}" || -z "${DEVPROP[ro.secure]}" ]]; then echo "$(trthtd 'ADB secured' 'Unknown')" >> "$devicedoc"
  elif [[ ${DEVPROP[ro.adb.secure]} -eq 1 || ${DEVPROP[ro.secure]} -eq 1 ]]; then echo "$(trthtd 'ADB secured' 'Yes')" >> "$devicedoc"
  else echo "$(trthtd 'ADB secured' 'No (running as root)')" >> "$devicedoc"
  fi
  [[ -n "${DEVPROP[ro.build.selinux]}" ]] && {
    if [[ ${DEVPROP[ro.build.selinux]} -eq 1 ]]; then echo "$(trthtd 'SELinux enabled' 'Yes')" >> "$devicedoc"
    elif [[ ${DEVPROP[ro.build.selinux]} -eq 0 ]]; then echo "$(trthtd 'SELinux enabled' 'No')" >> "$devicedoc"
    fi
  }
  [[ -n "${DEVPROP[ro.boot.selinux]}" ]] && echo "$(trthtd "$(href 'https://source.android.com/security/selinux' 'SELinux mode')" "${DEVPROP[ro.boot.selinux]}")" >> "$devicedoc"    # permissive/enforced
  [[ -n "${DEVPROP[ro.alarm_boot]}" ]] && {
    if [[ "${DEVPROP[ro.alarm_boot]}" = "false" ]]; then echo "$(trthtd 'Last boot triggered by RTC alarm' 'No')" >> "$devicedoc"
    else echo "$(trthtd 'Last boot triggered by RTC alarm' 'Yes')" >> "$devicedoc"
    fi
  }
  echo "$(tab_close)" >> "$devicedoc"


#=======================================================[ Users & Accounts ]===
  # ADB calls for the next two blocks must be made with default IFS or will fail
  doProgress "- Obtaining account and backup details" 2
  copyAdbContent dumpsys_account "adb ${ADBOPTS} shell dumpsys account" $tmp
  local accs=$(grep " Account {" $tmp | sed 's/[\{\}\r]//g' | awk '{$1=""; print $0}')
  copyAdbContent dumpsys_backup "adb ${ADBOPTS} shell dumpsys backup" $tmp2
  cat $tmp2 | sed 's/\r//g' > "$tmp"

  echo >> "$devicedoc"
  echo "$(heading 2 'Users and Accounts' 'devaccounts')" >> "$devicedoc"
  echo "  <li>$(href '#devaccounts' 'Users &amp; Accounts')</li>" >> "$devicehead"

  #----------------------------------------------------------=[ MultiUser ]=---
  [[ $DEVICE_SDKVER -gt 16 ]] && {  # not available on Android <= 4
    copyAdbContent dumpsys_user "adb ${ADBOPTS} shell dumpsys user" $tmp2
    [[ -s "$tmp2" ]] && {     # only if the file exists and has content
      doProgress "  + Processing user info" 3
      echo "$(tab_classopen 'block' 'tab_users')" >> "$devicedoc"
      echo "$(trth2 'Users')" >> "$devicedoc"
      OIFS="${IFS}"
      IFS=''
      local userno
      declare -a arr_opt
      lineno=0
      left=''
      while read zeile; do
        lineno+=1
        [[ $lineno -eq 1 ]] && continue   # header
        if [[ "${zeile:0:10}" = "  UserInfo" ]]; then     # UserInfo{0:null:13} serialNo=0
          regex=".*UserInfo\{([0-9]+)\:.*"
          regex=".*UserInfo.([0-9]+)\:.*"
          [[ "$zeile" =~ $regex ]] && userno=${BASH_REMATCH[1]}
          echo "$(trth2 "User $userno" 'sub')" >> "$devicedoc"
        elif [[ "${zeile:0:6}" = '      ' ]]; then        # Options
          arr_opt+=( "$(trim "$zeile")" )
        elif [[ "${zeile:0:4}" = '    ' ]]; then          # new item
          [[ "$(trim "${zeile%%:*}")" = "Last logged in fingerprint" ]] && continue
          if [[ ${#arr_opt} -gt 0 ]]; then                # options from previous block, e.g. Restrictions, exist
            echo "$(trthtd "${left%%:*}" "${arr_opt[*]}")" >> "$devicedoc"
            arr_opt=()
            left="$(trim "${zeile}")"
          elif [[ -n "${left}" ]]; then                   # previous element had no extra option lines
            if [[ "$(trim "${left#*: }")" = '<unknown>' ]]; then
              right='&lt;unknown&gt;'
            else
              right="$(trim "${left#*: }")"
            fi
            echo "$(trthtd "$(trim "${left%%:*}")" "$right")" >> "$devicedoc"
            left="$(trim "${zeile}")"
          else
            left="$(trim "${zeile}")"
          fi
        else
          if [[ ${#arr_opt} -gt 0 ]]; then
            echo "$(trthtd "${left%%:*}" "${arr_opt[*]}")" >> "$devicedoc"
            arr_opt=()
            left=""
          elif [[ -n "$(trim "${left}")" ]]; then
            echo "$(trthtd "$(trim "${left%%:*}")" "$(trim "${left#*: }")")" >> "$devicedoc"
            left=""
          fi
          [[ -n "$(trim "${zeile}")" ]] && break
        fi
      done < $tmp2
      IFS="${OIFS}"
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"

      doProgress "  + Processing multi-user settings" 3
      echo "$(tab_classopen 'block' 'tab_multiuser')" >> "$devicedoc"
      echo "$(trth2 'Multi-User settings')" >> "$devicedoc"
      OIFS="${IFS}"
      IFS=''
      grep -E -A99999 "^  Device managed:" $tmp2 | while read zeile; do
        zeile="$(trim "$zeile")"
        [[ -z "$zeile" ]] && continue
        echo "$(trthtd "${zeile%:*}" "${zeile#*: }")" >> "$devicedoc"
      done
      IFS=$OIFS
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"

      echo "$(tab_classopen 'block' 'tab_guestrestrict')" >> "$devicedoc"
      OIFS="${IFS}"
      IFS=''
      local regex='^    (\S*)$'
      echo "$(trth2 'Guest Account restrictions')" >> "$devicedoc"
      lineno=0
      grep -E -A99999 "^  Guest restrictions:" $tmp2 | grep -iE -B99999 "^  Device managed:" | while read zeile; do
        [[ "$zeile" =~ $regex ]] && {
          lineno+=1
          case "${BASH_REMATCH[1]}" in
            "no_sms") echo "$(trthtd $lineno "No SMS")" >> "$devicedoc" ;;
            "no_su")  echo "$(trthtd $lineno "No SuperUser")" >> "$devicedoc" ;;
            "no_install_unknown_sources") echo "$(trthtd $lineno "No installation from unknown sources")" >> "$devicedoc" ;;
            "no_config_wifi")     echo "$(trthtd $lineno "No WiFi configuration")" >> "$devicedoc" ;;
            "no_outgoing_calls")  echo "$(trthtd $lineno "No outgoing calls")" >> "$devicedoc" ;;
            *)                    echo "$(trthtd $lineno "${BASH_REMATCH[1]}")" >> "$devicedoc" ;;
          esac
        }
      done
      IFS=$OIFS
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"
    }
  }

  #-----------------------------------------------------------=[ Accounts ]=---
  doProgress "  + Processing accounts info" 3
  echo "$(tab_classopen 'block' 'tab_accounts')" >> "$devicedoc"
  echo "$(trth2 'Configured Accounts')" >> "$devicedoc"
  lineno=0
  OIFS="${IFS}"
  IFS="
"
  for acc in $accs; do
    lineno+=1
    echo "$(trthtd $lineno "${acc}")" >> "$devicedoc"
  done
  echo "$(tab_close)" >> "$devicedoc"

  #-------------------------------------------------------=[ DeviceAdmins ]=---
  [[ $MK_DEVICEINFO_DEVICEPOLICY -gt 0 ]] && {
    copyAdbContent dumpsys_device_policy "adb ${ADBOPTS} shell dumpsys device_policy" $tmp2
    if [[ -s "$tmp2" ]]; then
      doProgress "  + Processing device admins" 3
      echo "$(tab_classopen 'block' 'tab_devadmins')" >> "$devicedoc"
      echo "$(trth2 'Device Admins (first user only)')" >> "$devicedoc"
      OIFS="${IFS}"
      IFS=''
      regex='^    (\S+)\/(\S+):\s*$'      # name of the admin, e.g. 'com.google.android.gms/.mdm.receivers.MdmDeviceAdminReceiver'
      local regex2='^      (.+)=(.*)$'    # device admin option
      local regex3='^      (\S+):$'       # policies/options follow
      local regex4='^        (\S+)$'      # policies/options
      left=''
      right=''
      lineno=0
      # Note: we only parse device admins for the first user
      grep -E -A99999 "^  Enabled Device Admins" $tmp2 | grep -iE -B99999 "^    mPasswordOwner=" | \
        grep -v "Enabled Device Admins" | grep -v "mPasswordOwner=" | { while read zeile; do
          [[ -z "$zeile" ]] && continue
          lineno+=1
          if [[ "${zeile}" =~ $regex ]]; then      # new device admin
            [[ -n "$left" ]] && {     # finish policy/options block first
              echo "$(trthtd "$left" "${right:2}")" >> "$devicedoc"
              left=''
              right=''
            }
            echo "$(trth2 "${BASH_REMATCH[1]}/${BASH_REMATCH[2]}" 'sub')" >> "$devicedoc"     # note: "${BASH_REMATCH[1]}" could be made an app link
          elif [[ "${zeile}" =~ $regex2 ]]; then   # option for current device admin
            [[ -n "$left" ]] && {
              echo "$(trthtd "$left" "${right:2}")" >> "$devicedoc"
              left=''
              right=''
            }
            echo "$(trthtd "${BASH_REMATCH[1]}" "${BASH_REMATCH[2]}")" >> "$devicedoc"
          elif [[ "${zeile}" =~ $regex3 ]]; then
            [[ -n "$left" ]] && {
              echo "$(trthtd "$left" "${right:2}")" >> "$devicedoc"
              left=''
              right=''
            }
            left="${BASH_REMATCH[1]}"
            right=''
          elif [[ "${zeile}" =~ $regex4 ]]; then
            right="${right}, ${BASH_REMATCH[1]}"
          fi
      done
      IFS=${OIFS}
      [[ $lineno -eq 0 ]] && echo "$(trth2 "None found" 'sub')" >> "$devicedoc"    # block was empty
      } # ends the extended subshell of the while loop to keep the value of $lineno
      echo "$(tab_close)" >> "$devicedoc"
      echo >> "$devicedoc"
    else
      doProgress "  ! Skipping device policy (could not obtain data)"
    fi
  }

#================================================================[ Backups ]===
  echo >> "$devicedoc"
  echo >> "$devicedoc"
  echo "$(heading 2 "Android Backup Manager <b><sup>$(href "${WIKI_BASE}/DeviceInfo-explained#user-content-android-backup-manager" 'ⓘ' 'Wiki')</sup></b>" 'androidbackup')" >> "$devicedoc"
  echo "  <li>$(href '#androidbackup' 'Backup Manager')</li>" >> "$devicehead"
  echo " </ul></li>" >> "$devicehead"
  echo "$(tab_classopen 'block' 'tab_backupmanager')" >> "$devicedoc"
  echo "$(trthtd 'Backup Manager' "$(sed -rn 's/Backup Manager is (.*)/\1/p' "$tmp")")" >> "$devicedoc"
  echo "$(trthtd 'Auto-restore' "$(sed -rn 's/Auto-restore is (.+)/\1/p' "$tmp")")" >> "$devicedoc"
  echo "$(trthtd_ 'Backup destinations' "$(tab_classopen 'inner')")" >> "$devicedoc"
  while IFS= read -r zeile; do
    [[ "$zeile" =~ ^\ {4}([^\ ]+) ]] && echo -n "  $(trthtd_ "${BASH_REMATCH[1]}")" >> "$devicedoc"
    [[ "$zeile" =~ ^\ {2}\*\ ([^\ ]+) ]] && echo -n "  $(trthtd_ "<i>${BASH_REMATCH[1]}</i>")" >> "$devicedoc"
    [[ "$zeile" =~ ^\ {7}destination:\ (.+) ]] && echo "${BASH_REMATCH[1]}$(_tdtr)" >> "$devicedoc"
  done < <(grep -E -A99999 "^Available transports:" "$tmp" | grep -E -B99999 "^Pending init:")
  echo " $(tab_close)" >> "$devicedoc"
  echo "$(trthtd 'Last backup pass started' "$(sed -rn 's/Last backup pass started. (.+)/\1/p' "$tmp")")" >> "$devicedoc"
  echo "$(trthtd 'Ever backed up' "$(sed -rn 's/Ever backed up: (.*)/\1/p' "$tmp")")" >> "$devicedoc"
  [[ -n "$(grep 'Pending backup:' "$tmp")" ]] && echo "$(trthtd 'Pending backup' "$(sed -rn 's/Pending backup: (.*)/\1/p' "$tmp")")" >> "$devicedoc"
  [[ -n "$(grep 'Pending key/value backup:' "$tmp")" ]] && echo "$(trthtd 'Pending key/value backup' "$(sed -rn 's/Pending key\/value backup: (.*)/\1/p' "$tmp")")" >> "$devicedoc"
  [[ -n "$(grep 'Full backup queue:' "$tmp")" ]] && echo "$(trthtd 'Full backup queue' "$(sed -rn 's/Full backup queue: *(.*)/\1/p' "$tmp")")" >> "$devicedoc"
  echo "$(trthtd_ 'Participants' '<details><summary>expand</summary><ul>')" >> "$devicedoc"
  for zeile in $(grep -A1 "uid:" "$tmp"|awk '{print $1}'); do
    case "$zeile" in
      "uid:"|"--") ;;
      *) echo "   <li>${zeile}</li>" >> "$devicedoc" ;;
    esac
  done
  echo " </ul></details>$(_tdtr)" >> "$devicedoc"
  echo "$(tab_close)" >> "$devicedoc"

  IFS="${OIFS}"

  rm "$tmp" "$tmp2"
}
