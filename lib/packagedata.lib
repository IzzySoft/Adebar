##############################################################################
# Adebar Â© 2014, 2020 by Itzchak Rehberg
# This is part of the Adebar project, see https://codeberg.org/izzy/Adebar
# Protected by the GPLv2
# ----------------------------------------------------------------------------
# library to deal with package data (apps)
##############################################################################

# Mapping AndroidSDK to AndroidVersion
# SDK                                   5                               10                              15                              20                            25                            30
SDK2VER=("0" "1.0" "1.1" "1.5" "1.6" "2.0" "2.0.1" "2.1" "2.2" "2.3" "2.3.3" "3.0" "3.1" "3.2" "4.0" "4.0.3" "4.1" "4.2" "4.3" "4.4" "4.4W" "5.0" "5.1" "6.0" "7.0" "7.1" "8.0" "8.1" "9.0" "10.0" "11.0")

#
# Get app names by package names (if possible)
# $1: package name
# $2: path to apk file (for aapt)
# $3: whether to retrieve the app name if not found in cache
# $4: optional path to append to cache base dir. If set, only scan this (no AAPT, no update)
#
getAppname() {
  # Special cache dir?
  [[ -n "${CACHEDIR}" ]] && {
    if [[ -n "$4" && -d "${CACHEDIR}/appnames/${4}" ]]; then
      local CACHEDIR="${CACHEDIR}/appnames/${4}"
      local SCANONLY=1
    elif [[ -n "$4" ]]; then  # specified sub-cache doesn't exist
      echo "$1"
      return
    else
      local SCANONLY=0
      local CACHEDIR="${CACHEDIR}/appnames"
    fi
  }
  # Check cache first (fastest if we have it)
  if [[ -n "${CACHEDIR}" && -f "${CACHEDIR}/$1" ]]; then
    local name="$(cat "${CACHEDIR}/$1")"
    name="$(trim "$name")"
    if [[ -n "${name}" ]]; then
      echo "${name}"
      return
    fi
  fi

  # ScanOnly mode (special cache dir found)?
  if [[ $SCANONLY -ne 0 ]]; then
    echo "$1"
    return
  fi

  # still here, so not found in cache. Try AAPT (if we have it)
  if [[ $HAVE_AAPT -eq 1 ]]; then
    local str="$(adb ${ADBOPTS} shell "aapt d badging $2 2>/dev/null" | grep 'application: label' | sed -n "s/.*label\='\([^']*\)'.*/\1/p")" # label='Some App''
    str=${str//[$'\t\r\n']} # stupid ^M
    if [[ -n "${str}" ]]; then
      [[ -n "${CACHEDIR}" && -e "${CACHEDIR}" && ! -f "${CACHEDIR}/$1" ]] && echo -n $str > "${CACHEDIR}/$1"
      echo "${str}"
      return
    fi
  fi

  # not found in cache nor by AAPT: optionally call user script/function here (if defined)
  if [[ ${3} -gt 0 && -n "${APPNAME_CMD}" ]]; then
    name="$(${APPNAME_CMD} $1)"
    if [[ "${name}" != "$1" ]]; then
      echo "${name}" > "${CACHEDIR}/$1"
    fi
    echo "${name}"
    return
  fi

  # still here? So we found nothing. Return package_name then.
  echo "$1"
}


#
# Helpers for app usage stats
# credits to:
# - https://stackoverflow.com/questions/893585/how-to-parse-xml-in-bash
# - https://android.stackexchange.com/questions/116625/how-do-i-know-when-an-app-was-used-in-android
#
read_dom () {
    local IFS=\>
    read -d \< ENTITY CONTENT
    local RET=$?
    TAG_NAME=${ENTITY%% *}
    ATTRIBUTES=${ENTITY#* }
    return $RET
}
# Android JB + KK (verified: 4.1.2 on Cat SG2)
parse_dom_u4stat () {
    if [[ $TAG_NAME = "pkg" ]] ; then
        eval local $ATTRIBUTES
        currpkg="$name"
    elif [[ $TAG_NAME = "comp" ]] ; then
        eval local $ATTRIBUTES 2>/dev/null
        if [[ -z ${PK_LASTUSED[$currpkg]} || ${PK_LASTUSED[$currpkg]} -lt $lrt ]]; then
          PK_LASTUSED[$currpkg]=$lrt
        fi
    fi
}
#
# Now for the real thing
getAppUsage() {
  [[ ! -f "${CONFDIR}/usage-history.xml" ]] && return
  doProgress "- collecting app usage stats" 2
  currpkg=
  while read_dom; do
    parse_dom_u4stat
  done < "${CONFDIR}/usage-history.xml"

  for i in "${!PK_LASTUSED[@]}"; do
    ts=$((${PK_LASTUSED[$i]} / 1000)) # time is in ms
    if [[ "$(date -d @${ts} +"%Y")" = "1970" ]]; then PK_LASTUSED[$i]=
    else PK_LASTUSED[$i]="$(date -d @${ts} +"%Y-%m-%d %H:%M:%S")"
    fi
  done
}

#
# Collecting app storage details
#
declare -A PK_ASIZE
declare -A PK_CSIZE
declare -A PK_DSIZE
getAppStorageStats() {
  doProgress "- collecting app storage details" 2
  DSTATS=$(getAdbContent dumpsys_diskstats "adb ${ADBOPTS} shell dumpsys diskstats")
  re='Package Names: \[([^]]*)\]'
  if [[ $DSTATS =~ $re ]]; then
    PN=( ${BASH_REMATCH[1]//,/ } )
    re='App Sizes: \[([^]]*)\]'
    [[ $DSTATS =~ $re ]] && ASIZE=( ${BASH_REMATCH[1]//,/ } )
    re='App Data Sizes: \[([^]]*)\]'
    [[ $DSTATS =~ $re ]] && DSIZE=( ${BASH_REMATCH[1]//,/ } )
    re='Cache Sizes: \[([^]]*)\]'
    [[ $DSTATS =~ $re ]] && CSIZE=( ${BASH_REMATCH[1]//,/ } )
    declare -i acount=0
    while [[ $acount -lt ${#PN[@]} ]]; do
      pn=${PN[$acount]//\"/}
      PK_ASIZE[$pn]=${ASIZE[$acount]}
      PK_CSIZE[$pn]=${CSIZE[$acount]}
      PK_DSIZE[$pn]=${DSIZE[$acount]}
      acount+=1
    done
  fi
}


#
# Collect app details via dumpsys
#
declare -A PK_FLAGS     # (also needed by backup script: flags=[ SYSTEM HAS_CODE ALLOW_TASK_REPARENTING ALLOW_CLEAR_USER_DATA ALLOW_BACKUP LARGE_HEAP ]
declare -A PK_PRIVFLAGS # privateFlags=[ PRIVILEGED DEFAULT_TO_DEVICE_PROTECTED_STORAGE DIRECT_BOOT_AWARE RESIZEABLE_ACTIVITIES ]
getAppDetails() {
  local P_BLOCK="none" # none|pkglist|pkg|disabled|enabled|perms
  local P_PKGNAME=""   # name of the currently processed package
  local tmpstring=""
  local regex
  local appCategory=(game audio video image social news maps productivity)  # https://developer.android.com/reference/android/R.attr.html#appCategory
  local P_SKIP=(sharedUser pkg resourcePath nativeLibraryPath targetSdk timeStamp signatures permissionsFixed installPermissionsFixed pkgFlags pkgFlagsEx applicationInfo dexTimeStamp overlayTarget overlayCategory)
  declare -A PK_CODEPATH
  declare -A PK_VERSION
  declare -A PK_VERSIONCODE
  declare -A PK_MINSDK
  declare -A PK_TARGETSDK
  declare -A PK_SIGNINGVER
  declare -A PK_IDS           # UID/GID (from userId)
  declare -A PK_DATADIR
  declare -A PK_PRIMARYCPU
  declare -A PK_SECONDARYCPU
  declare -A PK_APPCATEGORY
  declare -A PK_SCREENSIZE
  declare -A PK_FIRSTINSTALL
  declare -A PK_LASTUPDATE
  declare -A PK_INSTALLERS    # per source
  PK_INSTALLERS[none]="unknown source"
  declare -A PK_INSTALLER     # per app
  declare -A PK_DISABLED      # list of components separated by spaces
  declare -A PK_MTKFLAGS      # mtkFlags=[ OPERATOR ]
  declare -A PK_USERS         # User 0:  installed=true stopped=false notLaunched=false enabled=0
  declare -A PK_LASTUSED      # Usage stats
  local tmp=$(mktemp)
  local PKGDUMP=$(mktemp)
  trap "rm -f -- '$PKGDUMP' '$tmp'" RETURN
  local SH_DISABLED="${OUTDIR}/deadReceivers.sh"

  doProgress "Generating app detail info"
  doProgress "- collecting data via dumpsys" 2
  copyAdbContent dumpsys_package "adb ${ADBOPTS} shell dumpsys package" $tmp
  grep -E -A99999 "^Packages:" $tmp | grep -iE -B99999 "^Shared users:" > "${PKGDUMP}"

  # Parsing dump
  doProgress "- parsing package dump" 2
  while IFS='' read zeile; do # no idea why, but some dump lines are terminated using CRLF
    zeile="${zeile%"${zeile##*[![:space:]]}"}" #" rtrim (e.g. S7 Edge otherwise causes trouble)
    case ${P_BLOCK} in
      none)
        [[ "$zeile" != "Packages:" ]] && continue;
        P_BLOCK="pkglist"
        doProgress "  - Found package list marker" 4
        continue;
        ;;

      pkglist)
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi
        ;;

      pkg)
        tmpstring="${zeile%%=*}"
        tmpstring="${tmpstring##*[[:space:]]}"
        # we skip some details here. Later we might decide to integrate them.
        in_array $tmpstring "${P_SKIP[@]}" && continue
        [[ "$zeile" = "    grantedPermissions:" ]] && continue
        [[ "$zeile" = "    usesOptionalLibraries:" ]] && continue
        [[ "$zeile" = "    usesLibraryFiles:" ]] && continue
        [[ "$zeile" = "    usesLibraries:" ]] && continue
        [[ "$zeile" = "    libraries:" ]] && continue
        [[ "$zeile" = "    overlay paths:" ]] && continue
        [[ "$zeile" = "    dynamic libraries:" ]] && continue
        regex='^\s+(dis|en)abledComponents:'
        [[ "${zeile:0:6}" = "      " && ! "${zeile}" =~ $regex ]] && continue
        [[ -z "${zeile%%* }" ]] && break # end of package list is an empty line, sometimes with spaces
        case "$tmpstring" in
          "codePath")
            PK_CODEPATH[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +codePath: ${PK_CODEPATH[$P_PKGNAME]}" 5
            continue
            ;;
          "versionCode")
            PK_VERSIONCODE[$P_PKGNAME]="${zeile#*=}"   # versionCode=1 minSdk=27 targetSdk=27
            PK_VERSIONCODE[$P_PKGNAME]="${PK_VERSIONCODE[$P_PKGNAME]%%[[:space:]]*}"
            # versionCode=906400000 minSdk=26 targetSdk=28
            re='minSdk=([0-9]+)'
            if [[ $zeile =~ $re ]]; then
              PK_MINSDK[$P_PKGNAME]=${BASH_REMATCH[1]}
            fi
            re='targetSdk=([0-9]+)'
            if [[ $zeile =~ $re ]]; then
              PK_TARGETSDK[$P_PKGNAME]=${BASH_REMATCH[1]}
            fi
            doProgress "    +versionCode: ${PK_VERSIONCODE[$P_PKGNAME]}, minSdk: ${PK_MINSDK[$P_PKGNAME]}, targetSdk: ${PK_TARGETSDK[$P_PKGNAME]}" 5
            continue
            ;;
          "versionName")
            PK_VERSION[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +version: ${PK_VERSION[$P_PKGNAME]}" 5
            continue
            ;;
          "apkSigningVersion")
            PK_SIGNINGVER[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +signingVersion: ${PK_SIGNINGVER[$P_PKGNAME]}" 5
            continue
            ;;
          "userId")
            PK_IDS[$P_PKGNAME]="$(trim "${zeile}")"
            doProgress "    +IDs: ${PK_IDS[$P_PKGNAME]}" 5
            continue
            ;;
          "dataDir")
            PK_DATADIR[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +data: ${PK_DATADIR[$P_PKGNAME]}" 5
            continue
            ;;
          "supportsScreens")
            PK_SCREENSIZE[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +screens: ${PK_SCREENSIZE[$P_PKGNAME]}" 5
            continue
            ;;
          "firstInstallTime")
            PK_FIRSTINSTALL[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +firstinst: ${PK_FIRSTINSTALL[$P_PKGNAME]}" 5
            continue
            ;;
          "lastUpdateTime")
            PK_LASTUPDATE[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +lastup: ${PK_LASTUPDATE[$P_PKGNAME]}" 5
            continue
            ;;
          "installerPackageName")
            in_array "${zeile##*=}" "${PK_INSTALLERS[@]}" || { # setting up "used sources" to group by
              if [ -z "${APP_INSTALL_SRC[${zeile##*=}]}" ]; then
                PK_INSTALLERS[${zeile##*=}]="${zeile##*=}"
              else
                PK_INSTALLERS[${zeile##*=}]="${APP_INSTALL_SRC[${zeile##*=}]}"
              fi
            }
            PK_INSTALLER[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +installer: ${PK_INSTALLER[$P_PKGNAME]}" 5
            continue
            ;;
          "flags")
            PK_FLAGS[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +flags: ${PK_FLAGS[$P_PKGNAME]}" 5
            continue
            ;;
          "privateFlags")
            PK_PRIVFLAGS[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +privFlags: ${PK_PRIVFLAGS[$P_PKGNAME]}" 5
            continue
            ;;
          "mtkFlags")
            # MTK devices only. Until now, we only know about the "OPERATOR" flag. No details what it is about.
            PK_MTKFLAGS[$P_PKGNAME]="${zeile##*=}"
            doProgress "    +flags: ${PK_MTKFLAGS[$P_PKGNAME]}" 5
            continue
            ;;
          *)
            if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
              tmpstring="${zeile##*[}"                      # strip leading
              P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
              doProgress "  - Package: $P_PKGNAME" 4
              continue
            fi
            regex='^\s+disabledComponents:'
            if [[ "${zeile}" =~ $regex ]]; then
              P_BLOCK="disabled"
              doProgress "    +disabledComponents" 5
              continue
            fi
            regex='^\s+enabledComponents:'
            if [[ "${zeile}" =~ $regex ]]; then
              P_BLOCK="enabled"
              doProgress "    +enabledComponents" 5
              continue
            fi
            if [[ "${zeile:0:8}" = "    User" ]]; then  # Android 4.2+ MultiUser info
              # '    User 0:  installed=true stopped=false notLaunched=false enabled=0'
              if [[ -z "${PK_USERS[$P_PKGNAME]}" ]]; then
                PK_USERS[$P_PKGNAME]="${zeile:4}"
              else
                PK_USERS[$P_PKGNAME]+="\n${zeile:4}"
              fi
              continue
            fi
            if [[ "${zeile:0:17}" == "    primaryCpuAbi" ]]; then # primaryCpuAbi=armeabi-v7a
              PK_PRIMARYCPU[$P_PKGNAME]="${zeile:18}"
              doProgress "    +primaryCpuAbi: ${PK_PRIMARYCPU[$P_PKGNAME]}" 5
              continue
            fi
            if [[ "${zeile:0:19}" == "    secondaryCpuAbi" ]]; then # secondaryCpuAbi=null
              PK_SECONDARYCPU[$P_PKGNAME]="${zeile:20}"
              doProgress "    +secondaryCpuAbi: ${PK_SECONDARYCPU[$P_PKGNAME]}" 5
              continue
            fi
            if [[ "${zeile:0:15}" == "    appCategory" ]]; then
              PK_APPCATEGORY[$P_PKGNAME]="${appCategory[${zeile:16}]}"
              doProgress "    +appCategory: ${PK_APPCATEGORY[$P_PKGNAME]}" 5
              continue
            fi
            # silently skip some stuff:
            if [[ "${zeile:0:24}" == "    install permissions:" || "${zeile:0:25}" == "    declared permissions:" || "${zeile:0:11}" == "    dexMode" || "${zeile:0:32}" == "    nativeLibraryRootRequiresIsa" || "${zeile:0:29}" == "    secondaryNativeLibraryDir" || "${zeile:0:20}" == "    nativeLibraryDir" || "${zeile:0:24}" == "    nativeLibraryRootDir" || "${zeile:0:26}" == "    legacyNativeLibraryDir" || "${zeile:0:10}" == "    splits" || "${zeile:0:16}" == "    compat name=" ]]; then
              continue
            fi

            oops "pkg" "${LINENO}" "Unexpected: '$zeile'" 2
            ;;
        esac
        ;;

      "disabled") # disabled components of current pkg
        if [[ -z "$zeile" ]]; then
          continue
        fi
        regex='^\s+enabledComponents:'
        if [[ "${zeile}" =~ $regex ]]; then
          P_BLOCK="enabled"
          doProgress "    +enabledComponents" 5
          continue
        fi
        if [[ "${zeile:0:6}" = "      " ]]; then
          if [[ -z "${PK_DISABLED[$P_PKGNAME]}" ]]; then
            PK_DISABLED[$P_PKGNAME]="${zeile:6}"
          else
            PK_DISABLED[$P_PKGNAME]="${PK_DISABLED[$P_PKGNAME]} ${zeile:6}"
          fi
          continue
        fi
        if [[ "${zeile}" = "    grantedPermissions:" ]]; then
          P_BLOCK="perms"
              doProgress "    +perms" 5
          continue
        fi
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi

        if [[ "$zeile" == "Renamed packages:" ]]; then  # temporary work-around to eliminate "oops" ###TODO###
          # P_BLOCK="renamed" ...
          break
        fi

        if [[ "$zeile" == "Hidden system packages:" ]]; then # temporary work-around to eliminate "oops" ###TODO###
          # P_BLOCK="hiddensystempackages" ...
          break
        fi

        if [[ "$zeile" == "Shared users:" ]]; then      # temporary work-around to eliminate "oops" ###TODO###
          # P_BLOCK="sharedusers" ...
          break
        fi

        oops "disabled" "${LINENO}" "'$zeile'" 2
        ;;

      "enabled") # enabled components of current pkg
        if [[ "${zeile:0:6}" = "      " ]]; then
          continue # we don't include enabled components
        fi
        if [[ "${zeile}" = "    grantedPermissions:" ]]; then
          P_BLOCK="perms"
          doProgress "    +perms" 5
          continue
        fi
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi

        oops "enabled" "${LINENO}" "$zeile" 2
        ;;

      "perms")
        if [[ "${zeile:0:6}" = "      " ]]; then
          continue # we don't include permissions (yet)
        fi
        if [[ "${zeile:0:11}" = "  Package [" ]]; then  # "  Package [com.google.android.location] (40e85638):"
          tmpstring="${zeile##*[}"                      # strip leading
          P_PKGNAME="${tmpstring%%]*}"                  # strip trailing
          P_BLOCK="pkg"
          doProgress "  - Package: $P_PKGNAME" 4
          continue
        fi

        oops "perms" "${LINENO}" "$zeile" 2
        ;;
      *)
        ;;
    esac

  done < "${PKGDUMP}"

  getAppUsage
  echo -e "#!${BASH_LOCATION}" > "${SH_DISABLED}"
  echo -e "# Disabled components on ${DEVICE_NAME} as of $(date '+%Y-%m-%d %H:%M')" >> "${SH_DISABLED}"
  echo -e "#\n# Check carefully before executing. Not all of those have been disabled by you :)\n#\n" >> "${SH_DISABLED}"

  getAppStorageStats

  [[ ${#uninstApps} -eq 0 ]] && MK_UNINSTAPPS=0 # no need to process if there are none
  [[ ${#disApps} -eq 0 ]] && MK_DISAPPS=0       # no need to process if there are none
  [[ ${#userApps} -eq 0 ]] && MK_USERAPPS=0     # no need to process if there are none (e.g. Android 2.x)
  [[ $((${MK_USERAPPS} + ${MK_SYSAPPS} + ${MK_UNINSTAPPS})) -ne 0 ]] && echo " <li>$(href '#apps' 'Apps')<ul>" > "${DOCDIR}/apps.head"
  [[ ${MK_DEFAULTAPPS} -ne 0 ]] && echo "  <li>$(href "#defaultApps" "Default Apps")</li>" >> "${DOCDIR}/apps.head"
  [[ ${MK_USERAPPS} -ne 0 ]] && _makeAppDoc "user"
  [[ ${MK_SYSAPPS}  -ne 0 ]] && _makeAppDoc "system"
  [[ ${MK_DISAPPS} -ne 0 ]] && _makeAppDoc "disabled"
  [[ ${MK_UNINSTAPPS} -ne 0 ]] && _makeAppDoc "uninst"
  [[ ${MK_DEFAULTAPPS} -ne 0 ]] && _makeDefaultAppDoc   # calling this last so userApps/sysApps can take care for app name retrieval
  [[ $((${MK_USERAPPS} + ${MK_SYSAPPS} + ${MK_UNINSTAPPS})) -ne 0 ]] && echo " </li></ul>" >> "${DOCDIR}/apps.head"

  doProgress "- removing temporary dumpfile" 2
  rm -f "${PKGDUMP}" "$tmp"
}


#
# Create "default apps" section
# (called from getAppDetails())
#
function _makeDefaultAppDoc() {
  doProgress "- generating defaultApps.md" 2
  local mdfile="${DOCDIR}/defaultApps.md"
  echo -e "$(heading 2 "Default Apps on ${DEVICE_NAME}" "defaultApps")\n" >> "${mdfile}"
  _makeWebviewDetails
  _mkStandardApps
}

#
# Standard Apps
# (called from _makeDefaultAppDoc())
# needs to be disabled for Dummies due to a bunch of separate calls
#
function _mkStandardApps() {
  [[ -n "${DUMMYDIR}" ]] && {
    doProgress "! skipping StandardApps for dummy device"
    return
  }

  local pkgname

  echo "$(tab_classopen 'block')" >> "${mdfile}"
  echo "$(trth2 'Standard Apps')" >> "${mdfile}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity -a com.android.contacts.action.LIST_ALL_CONTACTS |grep packageName|head -n 1)")"
  _defAppLine "Contacts" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity tel://123456 |grep packageName|head -n 1)")"
  _defAppLine "Dialer" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity mailto:john@example.com |grep packageName|head -n 1)")"
  _defAppLine "Mail" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity http://www.example.com/ |grep packageName|head -n 1)")"
  _defAppLine "Browser" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity sms://123456 |grep packageName|head -n 1)")"
  _defAppLine "Messenging" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity -a android.intent.action.MUSIC_PLAYER |grep packageName|head -n 1)")"
  _defAppLine "Music" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity -a android.media.action.IMAGE_CAPTURE |grep packageName|head -n 1)")"
  _defAppLine "Camera" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity -t image/* -a android.intent.action.PICK |grep packageName|head -n 1)")"
  _defAppLine "Gallery" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity -c android.intent.category.HOME -a android.intent.action.MAIN |grep packageName|head -n 1)")"
  _defAppLine "Homescreen" "${pkgname}"
  pkgname="$(trim "$(adb $ADBOPTS shell cmd package resolve-activity -a android.telephony.action.EMERGENCY_ASSISTANCE |grep packageName|head -n 1)")"
  _defAppLine "Emergency" "${pkgname}"

  echo -e "$(tab_close)\n" >> "${mdfile}"
}
function _defAppLine() {
  local app=$1
  local pkgname=$2
  [[ -n "${pkgname}" ]] && {
    if [[ "${pkgname#packageName=*}" = "android" ]]; then
      echo "$(trthtd "$app" 'unknown')" >> "${mdfile}"
    else
      echo "$(trthtd "$app" "$(_mkAppLink "${pkgname#packageName=*}" "$(_getSysAppName "${pkgname#packageName=*}")")")" >> "${mdfile}"
    fi
  }
}

#
# Retrieve webview details
# (called from _makeDefaultAppDoc())
#
function _makeWebviewDetails() {
  local tmp=$(mktemp)
  local pname
  local name
  local value
  declare -A WEBVIEW
  declare -a WEBVIEWAVAIL
  local tmplist

  # get and parse dumpsys
  copyAdbContent "dumpsys_webviewupdate" "adb $ADBOPTS shell dumpsys webviewupdate" "$tmp"
  local regex='^\s\s(\S.+?): (.+)$'
  local pkgreg='\((.+?), (.+?)\)'
  # Valid package com.android.chrome (versionName: 84.0.4147.89, versionCode: 414708970, targetSdkVersion: 30) is  installed/enabled for all users
  local availreg='^    Valid package (\S+) \(.+) is\s+(.+)$'
  declare -i avail=0
  while IFS='
' read zeile; do
    if [[ "${zeile}" =~ $regex ]]; then
      name=${BASH_REMATCH[1]}
      value=${BASH_REMATCH[2]}
      case $name in
        "Fallback logic enabled")   WEBVIEW['fallback']="$value" ;;
        'Multiprocess enabled')     WEBVIEW['multiprocess']="$value" ;;
        'WebView package dirty')    WEBVIEW['dirty']="$value" ;;
        'Any WebView package installed') WEBVIEW['installed']="$value" ;;
        'Current WebView package (name, version)')          ## Value: '(com.android.chrome, 84.0.4147.89)'
            if [[ "$value" =~ $pkgreg ]]; then
              WEBVIEW['curpkg']=${BASH_REMATCH[1]}
              WEBVIEW['curver']=${BASH_REMATCH[2]}
              WEBVIEW['curname']="$(_getSysAppName "${BASH_REMATCH[1]}")"
            fi
            ;;
        'Preferred WebView package (name, version)')
            if [[ "$value" =~ $pkgreg ]]; then
              WEBVIEW['prefpkg']=${BASH_REMATCH[1]}
              WEBVIEW['prefver']=${BASH_REMATCH[2]}
              WEBVIEW['prefname']="$(_getSysAppName "${BASH_REMATCH[1]}")"
            fi
            ;;
      esac

    elif [[ "${zeile}" =~ $availreg ]]; then
      WEBVIEWAVAIL[avail]="${BASH_REMATCH[1]} ${BASH_REMATCH[2]}"
      avail+=1
    fi
  done < "${tmp}"

  # generate document
  echo "$(tab_classopen 'block')" >> "${mdfile}"
  echo "$(trth2 'WebViews')" >> "${mdfile}"
  [[ -n "${WEBVIEW['installed']}" ]]      && echo "$(trthtd 'Any WebView package installed' "${WEBVIEW['installed']}")" >> "${mdfile}"
  [[ -n "${WEBVIEW['dirty']}" ]]          && echo "$(trthtd 'WebView package dirty' "${WEBVIEW['dirty']}")" >> "${mdfile}"
  [[ -n "${WEBVIEW['multiprocess']}" ]]   && echo "$(trthtd 'Multiprocess enabled' "${WEBVIEW['multiprocess']}")" >> "${mdfile}"
  [[ -n "${WEBVIEW['fallback']}" ]]       && echo "$(trthtd 'Fallback logic enabled' "${WEBVIEW['fallback']}")" >> "${mdfile}"
  [[ -n "${WEBVIEW['curpkg']}" ]]         && {
    tmplist="$(_mkAppLink "${WEBVIEW['curpkg']}" "${WEBVIEW['curname']}")"
    echo "$(trthtd 'Current WebView package' "${tmplist} v${WEBVIEW['curver']}")" >> "${mdfile}"
  }
  [[ -n "${WEBVIEW['prefpkg']}" ]]        && {
    tmplist="$(_mkAppLink "${WEBVIEW['prefpkg']}" "${WEBVIEW['prefname']}")"
    echo "$(trthtd 'Preferred WebView package' "${tmplist} v${WEBVIEW['prefver']}")" >> "${mdfile}"
  }
  [[ ${#WEBVIEWAVAIL[*]} -gt 0 ]] && {
    tmplist='<ul>'
    for item in $(seq 0 $((${#WEBVIEWAVAIL[*]} -1))); do
      pname="${WEBVIEWAVAIL[$item]}"
      value="${pname#* }"
      pname="${pname%% *}"
      name="${pname}"
      name="$(_getSysAppName "${pname}")"
      tmplist="${tmplist}<li>$(_mkAppLink "$pname" "$name") ${value}</li>"
    done
    echo "$(trthtd 'Available WebView packages' "${tmplist}</ul>")" >> "${mdfile}"
  }
  echo -e "$(tab_close)\n" >> "${mdfile}"
}

#
# Get app name from appcache
# (used by _makeWebviewDetails() & _mkStandardApps())
# param: pkgname
function _getSysAppName() {
  local pkgname=$1
  local appname
  appname="$(getAppname "${pkgname}" "-" 0 "")"
  [[ "${pkgname}" = "${appname}" && -n "${APPCACHESPLUS}" ]] && {
    for appcache in ${APPCACHESPLUS}; do
      appname="$(getAppname "${pkgname}" "-" 0 "$appcache")"
      [[ "${pkgname}" != "${appname}" ]] && break;
    done
  }
  echo "${appname}"
}

#
# Create app link depending on whether name and URL are available
# (used by _makeWebviewDetails() & _mkStandardApps())
# params: pkgname, appname
function _mkAppLink() {
  local pkgname=$1
  local appname="$2"
  local link
  if [[ "${appname}" = "${pkgname}" || -z "${appname}" ]]; then
    link=$pkgname
  elif [[ -n "${APP_MARKET_URL[unknown]}" ]]; then
    link="$(href "${APP_MARKET_URL[unknown]/\%s/${pkgname}}" "${appname}")"
  else
    link="${appname} (${pkgname})"
  fi
  echo "${link}"
}

#
# Create app documentation
# (called from getAppDetails())
# $1 = "user"|"system"
#
function _makeAppDoc() {
  local mdfile
  local apptype
  local applist
  case "${1,,}" in
    "user")
        doProgress "- generating userApps.md" 2
        mdfile="${DOCDIR}/userApps.md"
        apptype="User-Apps"
        applist=(${userApps[*]})
        echo -e "#\n# Disable User Components\n#" >> "${SH_DISABLED}"
        _retrieveAppNames=1
        ;;
    "system")
        doProgress "- generating sysApps.md" 2
        mdfile="${DOCDIR}/sysApps.md"
        apptype="System-Apps"
        applist=(${sysApps[*]})
        echo -e "\n\n#\n# Disable System Components\n#" >> "${SH_DISABLED}"
        _retrieveAppNames=${MK_SYSAPPS_RETRIEVE_NAMES}
        ;;
    "disabled")
        doProgress "- generating disApps.md" 2
        mdfile="${DOCDIR}/disApps.md"
        apptype="Disabled Apps"
        applist=(${disApps[*]})
        _retrieveAppNames=${MK_SYSAPPS_RETRIEVE_NAMES}
        ;;
    "uninst")
        doProgress "- generating uninstApps.md" 2
        mdfile="${DOCDIR}/uninstApps.md"
        apptype="Uninstalled Apps"
        applist=(${uninstApps[*]})
        _retrieveAppNames=${MK_SYSAPPS_RETRIEVE_NAMES}
        ;;
    *)
        oops "makeAppDoc" "${LINENO}" "We only know about user, system and uninst apps, but got asked for '$1'" 1
        return
        ;;
  esac

  # check if aapt is available on the device, so we can use it to retrieve e.g. app names
  if [[ -z "${DUMMYDIR}" ]]; then
    local str="$(adb ${ADBOPTS} shell "ls /system/bin/aapt 2>/dev/null")"
    str=${str//[$'\t\r\n']} # stupid ^M
    if [[ "${str}" = "/system/bin/aapt" ]]; then
      local HAVE_AAPT=1
    else
      local HAVE_AAPT=0
    fi
  else
    local HAVE_AAPT=0
  fi

  if [[ "$1" = "uninst" || "$1" = "disabled" ]]; then
    echo "$(heading 2 "${apptype} on ${DEVICE_NAME}" "${apptype/[- ]/_}")" > "${mdfile}"
  else
    echo "$(heading 2 "Installed ${apptype} on ${DEVICE_NAME}" "${apptype/[- ]/_}")" > "${mdfile}"
  fi
  echo "  <li>$(href "#${apptype/[- ]/_}" "${apptype}")</li>" >> "${DOCDIR}/apps.head"
  echo "<p class='date_info'>(As of $(date '+%Y-%m-%d %H:%M')) <b><sup><a href='${WIKI_BASE}/AppDetails-explained' title='Wiki'>â</a></sup></b></p>" >> "${mdfile}"
  declare -A PK_INFO
  for src in ${!PK_INSTALLERS[@]}; do
    PK_INFO[$src]=""
  done
  local CUR_INSTALLER
  local APPNAME
  for app in ${applist[@]}; do
    if [[ ("$1" = "system" || "$1" = "uninst" || "$1" = "disabled") && -n "${APPCACHESPLUS}" ]]; then
      for appcache in ${APPCACHESPLUS}; do
        APPNAME=$(getAppname "${app}" "${PK_CODEPATH[$app]}" $_retrieveAppNames "${appcache}")
        [[ "${APPNAME}" != "${app}" ]] && break;
      done
      [[ "${APPNAME}" = "${app}" ]] && APPNAME=$(getAppname "${app}" "${PK_CODEPATH[$app]}" $_retrieveAppNames)
    else
      APPNAME=$(getAppname "${app}" "${PK_CODEPATH[$app]}" $_retrieveAppNames)
    fi
    if [[ -z "${PK_INSTALLER[$app]}" ]]; then # no installer
      if [[ "${APPNAME}" = "${app}" ]]; then
        tmpstring="$app"
      elif [[ -n "${APP_MARKET_URL[unknown]}" ]]; then
        tmpstring="$(href "${APP_MARKET_URL[unknown]/\%s/$app}" "${APPNAME}")"
      else
        tmpstring="${APPNAME} (${app})"
      fi
    elif [[ -n "${APP_MARKET_URL[${PK_INSTALLER[$app]}]}" ]]; then
      tmpstring="$(href "${APP_MARKET_URL[${PK_INSTALLER[$app]}]/\%s/$app}" "${APPNAME}")"
    else # no web source
      if [[ "${APPNAME}" = "${app}" ]]; then
        tmpstring="$app"
      else
        tmpstring="${APPNAME} (${app})"
      fi
    fi
    tmpstring="$(trth2 "${tmpstring}" 'left')\n"
    [[ -n "${PK_APPCATEGORY[$app]}" ]]  && tmpstring+="$(trthtd 'Category' "${PK_APPCATEGORY[$app]}")\n"
    [[ -n "${PK_ASIZE[$app]}" ]]        && tmpstring+="$(trthtd 'storage used (app/data/cache)' "$(format_fsize ${PK_ASIZE[$app]}) / $(format_fsize ${PK_DSIZE[$app]}) / $(format_fsize ${PK_CSIZE[$app]})")\n"
    [[ -n "${PK_FIRSTINSTALL[$app]}" ]] && tmpstring+="$(trthtd 'first installed' "${PK_FIRSTINSTALL[$app]}")\n"
    [[ -n "${PK_LASTUPDATE[$app]}" ]]   && tmpstring+="$(trthtd 'last updated' "${PK_LASTUPDATE[$app]}")\n"
    [[ -n "${PK_LASTUSED[$app]}" ]]     && tmpstring+="$(trthtd 'last used' "${PK_LASTUSED[$app]}")\n"
    str=
    [[ -n "${PK_MINSDK[$app]}" ]]       && str+="; Android ${SDK2VER[${PK_MINSDK[$app]}]}+"
    [[ -n "${PK_TARGETSDK[$app]}" ]]    && str+="; targets Android ${SDK2VER[${PK_TARGETSDK[$app]}]}"
    [[ -n "${PK_VERSION[$app]}" ]]      && tmpstring+="$(trthtd 'installed version' "${PK_VERSION[$app]} (${PK_VERSIONCODE[$app]}${str})")\n"
    [[ -n "${PK_SIGNINGVER[$app]}" ]]   && tmpstring+="$(trthtd 'signature scheme' "${PK_SIGNINGVER[$app]}")\n"
    [[ -n "${PK_IDS[$app]}" ]]          && tmpstring+="$(trthtd 'IDs' "${PK_IDS[$app]}")\n"
    [[ -n "${PK_CODEPATH[$app]}" ]]     && tmpstring+="$(trthtd 'CodePath' "<code>${PK_CODEPATH[$app]}</code>")\n"
    [[ -n "${PK_DATADIR[$app]}" ]]      && tmpstring+="$(trthtd 'App data' "<code>${PK_DATADIR[$app]}</code>")\n"
    [[ -n "${PK_PRIMARYCPU[$app]}" && "${PK_PRIMARYCPU[$app]}" != "null" ]]     && tmpstring+="$(trthtd 'Primary CPU ABI' "<code>${PK_PRIMARYCPU[$app]}</code>")\n"
    [[ -n "${PK_SECONDARYCPU[$app]}" && "${PK_SECONDARYCPU[$app]}" != "null" ]] && tmpstring+="$(trthtd 'Secondary CPU ABI' "<code>${PK_SECONDARYCPU[$app]}</code>")\n"
    [[ -n "${PK_SCREENSIZE[$app]}" ]]   && tmpstring+="$(trthtd 'supported screen sizes' "${PK_SCREENSIZE[$app]}")\n"
    [[ -n "${PK_FLAGS[$app]}" ]]        && tmpstring+="$(trthtd 'flags' "${PK_FLAGS[$app]}")\n"
    [[ -n "${PK_PRIVFLAGS[$app]}" ]]    && tmpstring+="$(trthtd 'privateFlags' "${PK_PRIVFLAGS[$app]}")\n"
    [[ -n "${PK_MTKFLAGS[$app]}" ]]     && tmpstring+="$(trthtd 'mtkFlags' "${PK_MTKFLAGS[$app]}")\n"
    [[ -n "${PK_USERS[$app]}" ]]        && { # PK_USERS can be multi-line (when multi-user)!
      IFS=$'\n'
      for zeile in "${PK_USERS[$app]}"; do
        tmpstring+="$(trthtd "${zeile%%:*}" "$(trim "${zeile##*:}")")\n"
      done
      unset IFS
    }
    [[ -n "${PK_DISABLED[$app]}" ]]     && {
      tmpstring+="$(trthtd_ 'disabled components' '<details><summary>expand</summary><ul>')"
      echo "" >> "${SH_DISABLED}"
      for comp in ${PK_DISABLED[$app]}; do
        tmpstring+="<li>$comp</li>"
        echo "adb ${ADBOPTS} shell \"pm disable ${app}/${comp}\"" >> "${SH_DISABLED}"
      done
      tmpstring+="</ul></details>$(_tdtr)\n"
    }
    if [[ -z "${PK_INSTALLER[$app]}" ]]; then
      PK_INFO[none]+="$tmpstring\n"
    else
      CUR_INSTALLER="${PK_INSTALLER[$app]}"
      PK_INFO[$CUR_INSTALLER]+="$tmpstring\n"
    fi
  done
  for src in ${!PK_INSTALLERS[@]}; do
    [[ -n "${PK_INFO[$src]}" ]] && {
      echo -e "$(heading 3 "Installed from ${PK_INSTALLERS[$src]} (installer: $src)")\n" >> "${mdfile}"
      echo "$(tab_classopen 'apps')" >> "${mdfile}"
      echo -e "${PK_INFO[$src]}" >> "${mdfile}"
      echo -e "$(tab_close)\n" >> "${mdfile}"
    }
  done
}
